{
 "ver": "0.1",
 "info": {
  "id": "Mfs3DX",
  "date": "0",
  "viewed": 0,
  "name": "Green tunnel",
  "description": "green tunnel",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "greentunnel"
  ],
  "hasliked": 0,
  "parentid": "",
  "parentname": ""
 },
 "renderpass": [
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float scale = 2.0;\n    \n    vec2 z = 0.5 * uv * scale;\n   \n    float iterations = 50.0;\n    float bailout = 2.0;\n    float smoothness = 0.2;\n\n    // Introduire le temps pour rendre la fractale dynamique\n    float t = iTime * 0.5;\n    vec2 c = vec2(cos(t), sin(t)) * 0.5;\n\n    for (float i = 0.0; i < iterations; i++) {\n    \n        float power = 5.0; // Peut être ajusté à une valeur différente\n        vec2 zSquare = pow(z, vec2(power)) + z;\n\n        z = zSquare + c;\n\n        if (length(z) > bailout) {\n            float logZ = log2(length(z));\n            float nu = log2(logZ);\n\n            float iterSmooth = i + 1.0 - nu;\n            float smoothColor = 2. * iterSmooth / iterations;\n\n            vec3 col = vec3(0. ,smoothColor, 0.);\n            fragColor = vec4(col, 1.0);\n            return;\n        }\n    }\n\n    fragColor = vec4(vec3(0.0), 1.0);\n}\n",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}